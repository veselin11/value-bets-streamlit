import streamlit as st
import pandas as pd
from scipy.stats import poisson

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏
TEST_DATA = {
    "matches": [
        {
            "home_team": "Manchester City",
            "away_team": "Bournemouth",
            "odds": {"home": 1.30, "draw": 6.00, "away": 10.00},
            "stats": {
                "home_avg_goals": 2.8,
                "away_avg_goals": 1.1,
                "h2h": [3, 2, 4]  # –ü–æ—Å–ª–µ–¥–Ω–∏ 3 —Å—Ä–µ—â–∏: –≥–æ–ª–æ–≤–µ –¥–æ–º–∞–∫–∏–Ω
            }
        },
        {
            "home_team": "Liverpool",
            "away_team": "Everton",
            "odds": {"home": 1.45, "draw": 4.50, "away": 7.50},
            "stats": {
                "home_avg_goals": 2.5,
                "away_avg_goals": 0.9,
                "h2h": [2, 1, 0]
            }
        }
    ]
}

def calculate_probabilities(home_avg, away_avg):
    """–ò–∑—á–∏—Å–ª—è–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —á—Ä–µ–∑ Poisson –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è"""
    home_win, draw, away_win = 0, 0, 0
    for i in range(0, 6):
        for j in range(0, 6):
            p = poisson.pmf(i, home_avg) * poisson.pmf(j, away_avg)
            if i > j: home_win += p
            elif i == j: draw += p
            else: away_win += p
    return home_win, draw, away_win

def main():
    st.set_page_config(page_title="Value Bet Demo", layout="wide")
    st.title("üéØ Value Bet –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä [–î–µ–º–æ]")
    
    # –ò–∑–±–æ—Ä –Ω–∞ –º–∞—á
    selected_match = st.selectbox(
        "–ò–∑–±–µ—Ä–∏ –º–∞—á –∑–∞ –∞–Ω–∞–ª–∏–∑:",
        [f'{m["home_team"]} vs {m["away_team"]}' for m in TEST_DATA["matches"]]
    )
    
    # –ù–∞–º–µ—Ä–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –º–∞—á
    match = next(m for m in TEST_DATA["matches"] if f'{m["home_team"]} vs {m["away_team"]}' == selected_match)
    
    # –ò–∑—á–∏—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    prob_home, prob_draw, prob_away = calculate_probabilities(
        match["stats"]["home_avg_goals"],
        match["stats"]["away_avg_goals"]
    )
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader(f"üè† {match['home_team']}")
        st.metric("–°—Ä–µ–¥–Ω–∏ –≥–æ–ª–æ–≤–µ", match["stats"]["home_avg_goals"])
        st.metric("–®–∞–Ω—Å –∑–∞ –ø–æ–±–µ–¥–∞", f"{prob_home*100:.1f}%")
        st.metric("–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç", match["odds"]["home"])
        
    with col2:
        st.subheader("‚öñ –†–∞–≤–µ–Ω")
        st.metric("–®–∞–Ω—Å", f"{prob_draw*100:.1f}%")
        st.metric("–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç", match["odds"]["draw"])
        
    with col3:
        st.subheader(f"‚úà {match['away_team']}")
        st.metric("–°—Ä–µ–¥–Ω–∏ –≥–æ–ª–æ–≤–µ", match["stats"]["away_avg_goals"])
        st.metric("–®–∞–Ω—Å –∑–∞ –ø–æ–±–µ–¥–∞", f"{prob_away*100:.1f}%")
        st.metric("–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç", match["odds"]["away"])
    
    # Value Bet –∞–Ω–∞–ª–∏–∑
    st.divider()
    st.subheader("üîç Value Bet –ê–Ω–∞–ª–∏–∑")
    
    value_bets = []
    if prob_home > (1 / match["odds"]["home"]):
        value_bets.append(f"–ü–æ–±–µ–¥–∞ {match['home_team']}")
    if prob_draw > (1 / match["odds"]["draw"]):
        value_bets.append("–†–∞–≤–µ–Ω")
    if prob_away > (1 / match["odds"]["away"]):
        value_bets.append(f"–ü–æ–±–µ–¥–∞ {match['away_team']}")
    
    if value_bets:
        st.success(f"‚úÖ –°—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏: {', '.join(value_bets)}")
    else:
        st.error("‚ùå –ù—è–º–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏ –≤ —Ç–æ–∑–∏ –º–∞—á")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.divider()
    st.subheader("üìä –í–∏–∑—É–∞–ª–µ–Ω –∞–Ω–∞–ª–∏–∑")
    
    col1, col2 = st.columns(2)
    with col1:
        chart_data = pd.DataFrame({
            "–¢–∏–ø": ["–î–æ–º–∞–∫–∏–Ω", "–†–∞–≤–µ–Ω", "–ì–æ—Å—Ç"],
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç": [prob_home, prob_draw, prob_away]
        })
        st.bar_chart(chart_data, x="–¢–∏–ø", y="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç")
    
    with col2:
        h2h_data = pd.DataFrame({
            "–°—Ä–µ—â–∏": ["–ü–æ—Å–ª–µ–¥–Ω–∞ 1", "–ü–æ—Å–ª–µ–¥–Ω–∞ 2", "–ü–æ—Å–ª–µ–¥–Ω–∞ 3"],
            "–ì–æ–ª–æ–≤–µ –¥–æ–º–∞–∫–∏–Ω": match["stats"]["h2h"]
        })
        st.line_chart(h2h_data.set_index("–°—Ä–µ—â–∏"))

if __name__ == "__main__":
    main()
