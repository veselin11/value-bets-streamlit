import streamlit as st
import requests
import pandas as pd
import numpy as np
from scipy.stats import poisson
from datetime import datetime, timedelta
from pytz import timezone
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    FD_API_KEY = st.secrets["FOOTBALL_DATA_API_KEY"]
    ODDS_API_KEY = st.secrets["ODDS_API_KEY"]
except KeyError:
    st.error("‚ùå –õ–∏–ø—Å–≤–∞—Ç API –∫–ª—é—á–æ–≤–µ –≤ secrets.toml")
    st.stop()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
LOCAL_TZ = timezone("Europe/Sofia")
VALUE_THRESHOLD = 0.03  # –ú–∏–Ω–∏–º–∞–ª–µ–Ω –ø—Ä–∞–≥ –∑–∞ value bet (3%)
MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª–Ω–∏ –æ–ø–∏—Ç–∏ –∑–∞ API –∑–∞—è–≤–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_all_soccer_leagues():
    """–í–∑–µ–º–∏ –≤—Å–∏—á–∫–∏ —Ñ—É—Ç–±–æ–ª–Ω–∏ –ª–∏–≥–∏ –æ—Ç Odds API"""
    try:
        response = requests.get(
            "https://api.the-odds-api.com/v4/sports",
            params={"apiKey": ODDS_API_KEY}
        )
        leagues = response.json()
        return [
            league["key"] for league in leagues 
            if league["sport"].lower() == "soccer" 
            and "match" in league["description"].lower()
        ]
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ –ª–∏–≥–∏: {str(e)}")
        return []

def get_team_id(team_name: str) -> int:
    """–í—Ä—ä—â–∞ ID –Ω–∞ –æ—Ç–±–æ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ"""
    for _ in range(MAX_RETRIES):
        try:
            response = requests.get(
                "https://api.football-data.org/v4/teams",
                headers={"X-Auth-Token": FD_API_KEY},
                params={"name": team_name},
                timeout=10
            )
            if response.status_code == 200 and response.json()["teams"]:
                return response.json()["teams"][0]["id"]
            return None
        except Exception as e:
            logger.warning(f"–†–µ—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∞ –∑–∞ {team_name}")
    return None

@st.cache_data(ttl=3600)
def get_team_stats(team_id: int):
    """–í–∑–µ–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ—Ç–±–æ—Ä"""
    try:
        response = requests.get(
            f"https://api.football-data.org/v4/teams/{team_id}/matches",
            headers={"X-Auth-Token": FD_API_KEY},
            params={"status": "FINISHED", "limit": 30},
            timeout=15
        )
        matches = response.json().get("matches", [])
        
        if not matches:
            return None
            
        home_goals = []
        away_goals = []
        results = []
        
        for match in matches[-15:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏ 15 –º–∞—á–∞
            if match["homeTeam"]["id"] == team_id:
                home_goals.append(match["score"]["fullTime"]["home"])
                results.append(1 if match["score"]["fullTime"]["home"] > match["score"]["fullTime"]["away"] else 0)
            else:
                away_goals.append(match["score"]["fullTime"]["away"])
                results.append(1 if match["score"]["fullTime"]["away"] > match["score"]["fullTime"]["home"] else 0)
        
        return {
            "avg_home": np.mean(home_goals) if home_goals else 1.2,
            "avg_away": np.mean(away_goals) if away_goals else 0.9,
            "form": results[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏ 5 –º–∞—á–∞
        }
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return None

def calculate_value_bet(match_data: dict):
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ value bet"""
    try:
        home_team = match_data["home_team"]
        away_team = match_data["away_team"]
        commence_time = datetime.fromisoformat(match_data["commence_time"]).astimezone(LOCAL_TZ)
        
        if commence_time < datetime.now(LOCAL_TZ):
            return None
            
        # –í–∑–µ–º–∏ ID –Ω–∞ –æ—Ç–±–æ—Ä–∏
        home_id = get_team_id(home_team)
        away_id = get_team_id(away_team)
        
        if not home_id or not away_id:
            return None
            
        # –í–∑–µ–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        home_stats = get_team_stats(home_id)
        away_stats = get_team_stats(away_id)
        
        if not home_stats or not away_stats:
            return None
        
        # –ò–∑—á–∏—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        home_avg = home_stats["avg_home"]
        away_avg = away_stats["avg_away"]
        
        home_prob, draw_prob, away_prob = 0.0, 0.0, 0.0
        for i in range(6):
            for j in range(6):
                p = poisson.pmf(i, home_avg) * poisson.pmf(j, away_avg)
                home_prob += p if i > j else 0
                draw_prob += p if i == j else 0
                away_prob += p if i < j else 0
        
        # –ù–∞–º–µ—Ä–∏ –Ω–∞–π-–¥–æ–±—Ä–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏
        bookmakers = match_data.get("bookmakers", [])
        if not bookmakers:
            return None
            
        home_odds = []
        draw_odds = []
        away_odds = []
        
        for bookmaker in bookmakers:
            for outcome in bookmaker["markets"][0]["outcomes"]:
                if outcome["name"] == home_team:
                    home_odds.append(outcome["price"])
                elif outcome["name"] == "Draw":
                    draw_odds.append(outcome["price"])
                elif outcome["name"] == away_team:
                    away_odds.append(outcome["price"])
        
        if not home_odds or not draw_odds or not away_odds:
            return None
            
        best_home = max(home_odds)
        best_draw = max(draw_odds)
        best_away = max(away_odds)
        
        # –ò–º–ø–ª–∏—Ü–∏—Ç–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        implied_home = 1 / best_home
        implied_draw = 1 / best_draw
        implied_away = 1 / best_away
        
        # Value –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
        value_home = home_prob - implied_home
        value_draw = draw_prob - implied_draw
        value_away = away_prob - implied_away
        
        if max(value_home, value_draw, value_away) < VALUE_THRESHOLD:
            return None
            
        return {
            "–õ–∏–≥–∞": match_data["sport_title"],
            "–ú–∞—á": f"{home_team} vs {away_team}",
            "–î–∞—Ç–∞": commence_time.strftime("%d.%m %H:%M"),
            "–®–∞–Ω—Å –î–æ–º–∞–∫–∏–Ω": f"{home_prob*100:.1f}%",
            "–®–∞–Ω—Å –†–∞–≤–µ–Ω": f"{draw_prob*100:.1f}%",
            "–®–∞–Ω—Å –ì–æ—Å—Ç": f"{away_prob*100:.1f}%",
            "Value –î–æ–º–∞–∫–∏–Ω": value_home,
            "Value –†–∞–≤–µ–Ω": value_draw,
            "Value –ì–æ—Å—Ç": value_away,
            "–ö–æ–µ—Ñ. –î–æ–º–∞–∫–∏–Ω": best_home,
            "–ö–æ–µ—Ñ. –†–∞–≤–µ–Ω": best_draw,
            "–ö–æ–µ—Ñ. –ì–æ—Å—Ç": best_away,
            "–§–æ—Ä–º–∞ –î–æ–º–∞–∫–∏–Ω": "".join(["‚úÖ" if x == 1 else "‚ùå" for x in home_stats["form"]]),
            "–§–æ—Ä–º–∞ –ì–æ—Å—Ç": "".join(["‚úÖ" if x == 1 else "‚ùå" for x in away_stats["form"]])
        }
    except Exception as e:
        logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ {home_team} vs {away_team}: {str(e)}")
        return None

def main():
    st.set_page_config(page_title="üåç Global Value Bets", layout="wide")
    st.title("‚öΩ Value Bets - –í—Å–∏—á–∫–∏ –õ–∏–≥–∏")
    
    try:
        # –í–∑–µ–º–∏ –≤—Å–∏—á–∫–∏ –ª–∏–≥–∏
        leagues = get_all_soccer_leagues()
        if not leagues:
            st.error("–ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ —Ñ—É—Ç–±–æ–ª–Ω–∏ –ª–∏–≥–∏")
            return
            
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        progress_bar = st.progress(0)
        total_leagues = len(leagues)
        
        # –°—ä–±–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
        all_matches = []
        for idx, league in enumerate(leagues):
            try:
                # –ó–∞—Ä–µ–¥–∏ –º–∞—á–æ–≤–µ –∑–∞ –ª–∏–≥–∞—Ç–∞
                response = requests.get(
                    f"https://api.the-odds-api.com/v4/sports/{league}/odds",
                    params={
                        "apiKey": ODDS_API_KEY,
                        "regions": "eu",
                        "markets": "h2h"
                    },
                    timeout=15
                )
                
                if response.status_code != 200:
                    continue
                    
                matches = response.json()
                for match in matches:
                    result = calculate_value_bet(match)
                    if result:
                        all_matches.append(result)
                
                progress_bar.progress((idx + 1) / total_leagues)
                
            except Exception as e:
                logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ {league}: {str(e)}")
                continue
        
        progress_bar.empty()
        
        if not all_matches:
            st.warning("""
                üßê –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ value bets. –í—ä–∑–º–æ–∂–Ω–∏ –ø—Ä–∏—á–∏–Ω–∏:
                1. –í—Å–∏—á–∫–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏ —Å–∞ —Ç–æ—á–Ω–∏ —Å–ø–æ—Ä–µ–¥ –º–æ–¥–µ–ª–∞
                2. –õ–∏–ø—Å–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –¥–∞–Ω–Ω–∏
                3. –í–∏—Å–æ–∫ –ø—Ä–∞–≥ –∑–∞ –º–∏–Ω–∏–º–∞–ª–µ–Ω value
                """)
            return
            
        # –°—ä–∑–¥–∞–π DataFrame
        df = pd.DataFrame(all_matches).sort_values(["Value –î–æ–º–∞–∫–∏–Ω", "Value –†–∞–≤–µ–Ω", "Value –ì–æ—Å—Ç"], ascending=False)
        
        # –°—Ç–∏–ª–∏–∑–∏—Ä–∞–Ω–µ
        def color_value(value):
            color = 'green' if value >= VALUE_THRESHOLD else 'red' if value <= -VALUE_THRESHOLD else 'black'
            return f'color: {color}'
        
        styled_df = df.style.map(color_value, subset=["Value –î–æ–º–∞–∫–∏–Ω", "Value –†–∞–≤–µ–Ω", "Value –ì–æ—Å—Ç"])
        
        # –ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        st.dataframe(
            styled_df.format({
                "Value –î–æ–º–∞–∫–∏–Ω": "{:.2%}",
                "Value –†–∞–≤–µ–Ω": "{:.2%}",
                "Value –ì–æ—Å—Ç": "{:.2%}",
                "–ö–æ–µ—Ñ. –î–æ–º–∞–∫–∏–Ω": "{:.2f}",
                "–ö–æ–µ—Ñ. –†–∞–≤–µ–Ω": "{:.2f}",
                "–ö–æ–µ—Ñ. –ì–æ—Å—Ç": "{:.2f}"
            }),
            column_config={
                "–§–æ—Ä–º–∞ –î–æ–º–∞–∫–∏–Ω": "–ü–æ—Å–ª–µ–¥–Ω–∏ 5 (–î)",
                "–§–æ—Ä–º–∞ –ì–æ—Å—Ç": "–ü–æ—Å–ª–µ–¥–Ω–∏ 5 (–ì)"
            },
            hide_index=True,
            use_container_width=True,
            height=800
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.divider()
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–û–±—â–æ –º–∞—á–æ–≤–µ", len(all_matches))
        with col2:
            st.metric("–ù–∞–º–µ—Ä–µ–Ω–∏ –ª–∏–≥–∏", f"{len(leagues)}/{total_leagues}")
        with col3:
            st.metric("–ü–æ—Å–ª–µ–¥–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ", datetime.now(LOCAL_TZ).strftime("%H:%M:%S"))
        
    except Exception as e:
        st.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}")
        logger.exception("–ì—Ä–µ—à–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–∏—è –ø–æ—Ç–æ–∫")

if __name__ == "__main__":
    main()
