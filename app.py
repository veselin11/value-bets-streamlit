import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta, timezone
from pytz import timezone as tz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
try:
    ODDS_API_KEY = st.secrets["ODDS_API_KEY"]
except KeyError:
    st.error("‚ùå –õ–∏–ø—Å–≤–∞ API –∫–ª—é—á –≤ secrets.toml")
    st.stop()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
LOCAL_TZ = tz("Europe/Sofia")
SPORTS = {
    "soccer_epl": "–ê–Ω–≥–ª–∏—è - –í–∏—Å—à–∞ –õ–∏–≥–∞",
    "soccer_spain_la_liga": "–ò—Å–ø–∞–Ω–∏—è - –õ–∞ –õ–∏–≥–∞",
    "soccer_germany_bundesliga": "–ì–µ—Ä–º–∞–Ω–∏—è - –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞",
    "soccer_italy_serie_a": "–ò—Ç–∞–ª–∏—è - –°–µ—Ä–∏—è –ê",
    "soccer_france_ligue_one": "–§—Ä–∞–Ω—Ü–∏—è - –õ–∏–≥–∞ 1"
}
DAYS_AHEAD = 3

def get_utc_iso(time: datetime) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ –≤—Ä–µ–º–µ –∫—ä–º UTC ISO —Ñ–æ—Ä–º–∞—Ç"""
    return time.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")

@st.cache_data(ttl=600)
def get_matches(sport_key: str):
    """–í–∑–µ–º–∏ –º–∞—á–æ–≤–µ –æ—Ç API"""
    try:
        now = datetime.now(timezone.utc)
        date_from = get_utc_iso(now)
        date_to = get_utc_iso(now + timedelta(days=DAYS_AHEAD))

        response = requests.get(
            f"https://api.the-odds-api.com/v4/sports/{sport_key}/odds",
            params={
                "apiKey": ODDS_API_KEY,
                "regions": "eu",
                "markets": "h2h",
                "commenceTimeFrom": date_from,
                "commenceTimeTo": date_to
            },
            timeout=15
        )

        if response.status_code == 401:
            st.error("‚õî –ù–µ–≤–∞–ª–∏–¥–µ–Ω API –∫–ª—é—á")
            return []
        if response.status_code != 200:
            return []

        return response.json()
    except Exception as e:
        st.error(f"üö® –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞: {str(e)}")
        return []

def main():
    st.set_page_config(page_title="‚öΩ Live Matches", layout="wide")
    st.title("üî¥ Live –ú–∞—á–æ–≤–µ –¢—Ä–µ–∫–µ—Ä")
    
    all_matches = []
    
    for sport_key, sport_name in SPORTS.items():
        with st.spinner(f"–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ {sport_name}..."):
            matches = get_matches(sport_key)
            
            for match in matches:
                try:
                    match_time = datetime.fromisoformat(match["commence_time"]).astimezone(LOCAL_TZ)
                    if match_time < datetime.now(LOCAL_TZ):
                        continue
                        
                    all_matches.append({
                        "–õ–∏–≥–∞": sport_name,
                        "–î–æ–º–∞–∫–∏–Ω": match["home_team"],
                        "–ì–æ—Å—Ç": match["away_team"],
                        "–î–∞—Ç–∞": match_time.strftime("%d.%m"),
                        "–ß–∞—Å": match_time.strftime("%H:%M"),
                        "–ë—É–∫–º–µ–π–∫—ä—Ä–∏": len(match["bookmakers"])
                    })
                except KeyError:
                    continue

    if not all_matches:
        st.warning("""
            üèüÔ∏è –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –º–∞—á–æ–≤–µ. –í—ä–∑–º–æ–∂–Ω–∏ –ø—Ä–∏—á–∏–Ω–∏:
            1. –ù—è–º–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏ –º–∞—á–æ–≤–µ –≤ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ 3 –¥–Ω–∏
            2. –ò–∑—á–µ—Ä–ø–∞–Ω–∏ —Å–∞ API –∑–∞—è–≤–∫–∏—Ç–µ
            3. –ü—Ä–æ–±–ª–µ–º —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞
            """)
        return

    # –°–æ—Ä—Ç–∏—Ä–∞–π –∏ –ø–æ–∫–∞–∂–∏ –¥–∞–Ω–Ω–∏—Ç–µ
    df = pd.DataFrame(all_matches).sort_values(["–î–∞—Ç–∞", "–ß–∞—Å"])
    
    st.subheader(f"üîç –ù–∞–º–µ—Ä–µ–Ω–∏ –º–∞—á–æ–≤–µ: {len(df)}")
    st.dataframe(
        df,
        column_config={
            "–ë—É–∫–º–µ–π–∫—ä—Ä–∏": st.column_config.NumberColumn(
                format="%d üè¶",
                help="–ë—Ä–æ–π –ø—Ä–µ–¥–ª–∞–≥–∞—â–∏ –±—É–∫–º–µ–π–∫—ä—Ä–∏"
            )
        },
        hide_index=True,
        use_container_width=True,
        height=600
    )

if __name__ == "__main__":
    main()
