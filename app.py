import streamlit as st from datetime import datetime import pandas as pd import io import matplotlib.pyplot as plt import random

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

st.set_page_config(page_title="–°—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏", layout="wide") st.markdown(""" <style> .main {background-color: #f5f7fa;} div.stButton > button:first-child { background-color: #0e76a8; color: white; font-weight: bold; } div.stDownloadButton > button:first-child { background-color: #4CAF50; color: white; } .stMetricValue { color: #0e76a8; } @media (max-width: 768px) { div.block-container { padding: 1rem; } div[data-testid="column"] { flex: 100% !important; max-width: 100% !important; } } </style> """, unsafe_allow_html=True)

–°–µ—Å–∏–π–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

if "history" not in st.session_state: st.session_state["history"] = []

if "balance" not in st.session_state: st.session_state["balance"] = 500

–ü—Ä–∏–º–µ—Ä–Ω–∏ –∑–∞–ª–æ–∑–∏ –∑–∞ –¥–Ω–µ—Å

value_bets = [ {"–ú–∞—á": "Liverpool vs Aston Villa", "–ü–∞–∑–∞—Ä": "1", "–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç": 1.85, "Value %": 7.2, "–ù–∞—á–∞–ª–µ–Ω —á–∞—Å": "18:30"}, {"–ú–∞—á": "Juventus vs Napoli", "–ü–∞–∑–∞—Ä": "–ü–æ–¥ 2.5", "–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç": 2.1, "Value %": 6.8, "–ù–∞—á–∞–ª–µ–Ω —á–∞—Å": "21:45"}, {"–ú–∞—á": "Leipzig vs Frankfurt", "–ü–∞–∑–∞—Ä": "–ì–ì", "–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç": 1.95, "Value %": 5.9, "–ù–∞—á–∞–ª–µ–Ω —á–∞—Å": "16:00"}, {"–ú–∞—á": "Marseille vs Monaco", "–ü–∞–∑–∞—Ä": "–ù–∞–¥ 2.5", "–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç": 2.0, "Value %": 8.0, "–ù–∞—á–∞–ª–µ–Ω —á–∞—Å": "22:00"}, {"–ú–∞—á": "Fenerbahce vs Galatasaray", "–ü–∞–∑–∞—Ä": "–•", "–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç": 3.4, "Value %": 9.5, "–ù–∞—á–∞–ª–µ–Ω —á–∞—Å": "20:00"}, ]

Tabs

tabs = st.tabs(["‚öΩ –ü—Ä–æ–≥–Ω–æ–∑–∏", "üìú –ò—Å—Ç–æ—Ä–∏—è", "üìà –ì—Ä–∞—Ñ–∏–∫–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

=== –ü—Ä–æ–≥–Ω–æ–∑–∏ ===

with tabs[0]: st.title("–î–Ω–µ—à–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏") st.caption("–ò–∑–±–µ—Ä–∏ –∑–∞–ª–æ–≥, –∑–∞ –¥–∞ –≥–æ –¥–æ–±–∞–≤–∏—à –∫—ä–º –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ —Å–∏")

df = pd.DataFrame(value_bets)
for i, row in df.iterrows():
    with st.container(border=True):
        col1, col2, col3, col4, col5, col6 = st.columns([3, 1.2, 1.2, 1.2, 2, 2])
        col1.markdown(f"**{row['–ú–∞—á']}**")
        col2.write(row["–ü–∞–∑–∞—Ä"])
        col3.markdown(f"<span style='color:#ff4b4b'><strong>{row['–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç']:.2f}</strong></span>", unsafe_allow_html=True)
        col4.markdown(f"<span style='color:#ffa500'>{row['Value %']}%</span>", unsafe_allow_html=True)
        col5.write(row["–ù–∞—á–∞–ª–µ–Ω —á–∞—Å"])

        suggested_bet = round(st.session_state["balance"] * 0.05, -1)
        if col6.button(f"–ó–∞–ª–æ–≥ {suggested_bet} –ª–≤", key=f"bet_{i}"):
            profit = round((row["–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç"] - 1) * suggested_bet, 2)
            st.session_state["history"].append({
                "–ú–∞—á": row["–ú–∞—á"],
                "–ü–∞–∑–∞—Ä": row["–ü–∞–∑–∞—Ä"],
                "–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç": row["–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç"],
                "–°—É–º–∞": suggested_bet,
                "–ü–µ—á–∞–ª–±–∞": profit,
                "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M"),
                "–°—Ç–∞—Ç—É—Å": "–ü—Ä–µ–¥—Å—Ç–æ–∏"
            })
            st.success(f"–î–æ–±–∞–≤–µ–Ω –∑–∞–ª–æ–≥: {row['–ú–∞—á']} ‚Äì {row['–ü–∞–∑–∞—Ä']}")

=== –ò—Å—Ç–æ—Ä–∏—è ===

with tabs[1]: st.header("–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –∑–∞–ª–æ–∑–∏—Ç–µ") if st.session_state["history"]: history_df = pd.DataFrame(st.session_state["history"]) st.dataframe(history_df, use_container_width=True)

total_bets = len(history_df)
    total_staked = sum(b["–°—É–º–∞"] for b in st.session_state["history"])
    total_profit = sum(b["–ü–µ—á–∞–ª–±–∞"] for b in st.session_state["history"])
    roi = (total_profit / total_staked) * 100 if total_staked > 0 else 0

    col1, col2, col3 = st.columns(3)
    col1.metric("–û–±—â–æ –∑–∞–ª–æ–∑–∏", total_bets)
    col2.metric("–ù–µ—Ç–Ω–∞ –ø–µ—á–∞–ª–±–∞", f"{total_profit:.2f} –ª–≤")
    col3.metric("ROI", f"{roi:.2f}%")

    if st.button("–ü—Ä–∏–∫–ª—é—á–∏ –≤—Å–∏—á–∫–∏ '–ü—Ä–µ–¥—Å—Ç–æ–∏' –∑–∞–ª–æ–∑–∏"):
        for i, bet in enumerate(st.session_state["history"]):
            if bet["–°—Ç–∞—Ç—É—Å"] == "–ü—Ä–µ–¥—Å—Ç–æ–∏":
                outcome = random.choice(["–ü–µ—á–µ–ª–∏", "–ì—É–±–∏"])
                st.session_state["history"][i]["–°—Ç–∞—Ç—É—Å"] = outcome
                st.session_state["history"][i]["–ü–µ—á–∞–ª–±–∞"] = (
                    round((bet["–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç"] - 1) * bet["–°—É–º–∞"], 2)
                    if outcome == "–ü–µ—á–µ–ª–∏" else -bet["–°—É–º–∞"]
                )
        st.success("–û–±–Ω–æ–≤–µ–Ω–∏ –≤—Å–∏—á–∫–∏ –∑–∞–ª–æ–∑–∏.")
        st.rerun()

    def to_excel(df):
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
            df.to_excel(writer, index=False, sheet_name="–ò—Å—Ç–æ—Ä–∏—è")
        return output.getvalue()

    excel_data = to_excel(history_df)
    st.download_button("–°–≤–∞–ª–∏ –≤ Excel", data=excel_data, file_name="istoriya_zalozi.xlsx")
else:
    st.info("–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∏—Å—Ç–æ—Ä–∏—è.")

=== –ì—Ä–∞—Ñ–∏–∫–∏ ===

with tabs[2]: st.header("–ì—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –ø–µ—á–∞–ª–±–∞—Ç–∞") if st.session_state["history"]: history_df = pd.DataFrame(st.session_state["history"]) history_df["–ù–∞—Ç—Ä—É–ø–∞–Ω–∞ –ø–µ—á–∞–ª–±–∞"] = history_df["–ü–µ—á–∞–ª–±–∞"].cumsum() history_df["–î–∞—Ç–∞"] = pd.to_datetime(history_df["–î–∞—Ç–∞"])

fig, ax = plt.subplots()
    ax.plot(history_df["–î–∞—Ç–∞"], history_df["–ù–∞—Ç—Ä—É–ø–∞–Ω–∞ –ø–µ—á–∞–ª–±–∞"], marker="o", linestyle="-", color="green")
    ax.set_title("–ù–∞—Ç—Ä—É–ø–∞–Ω–∞ –ø–µ—á–∞–ª–±–∞ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–ü–µ—á–∞–ª–±–∞ (–ª–≤)")
    plt.xticks(rotation=45)
    st.pyplot(fig)
else:
    st.info("–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ.")

=== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===

with tabs[3]: st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞") new_balance = st.number_input("–ù–∞—á–∞–ª–Ω–∞ –±–∞–Ω–∫–∞", min_value=100, value=st.session_state["balance"], step=10) if st.button("–ó–∞–ø–∞–∑–∏"): st.session_state["balance"] = new_balance st.success("–ë–∞–Ω–∫–∞—Ç–∞ –µ –æ–±–Ω–æ–≤–µ–Ω–∞!") st.rerun()

            
