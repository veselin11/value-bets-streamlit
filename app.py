import streamlit as st
import requests
import datetime
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
THE_ODDS_API_KEY = "2e086a4b6d758dec878ee7b5593405b1"
BASE_URL = "https://api.the-odds-api.com/v4/sports/"
MARKETS = ["totals", "h2h"]
BOOKMAKERS = ["pinnacle"]
MIN_VALUE_THRESHOLD = 0.2  # 20%
INITIAL_BANKROLL = 500
BET_AMOUNT = 50
MAX_BETS_PER_DAY = 3

if 'bets' not in st.session_state:
    st.session_state.bets = []
if 'bankroll' not in st.session_state:
    st.session_state.bankroll = INITIAL_BANKROLL
if 'total_staked' not in st.session_state:
    st.session_state.total_staked = 0
if 'total_returned' not in st.session_state:
    st.session_state.total_returned = 0

# UI - –ó–∞–≥–ª–∞–≤–∏–µ –∏ –∏–∑–±–æ—Ä –Ω–∞ –¥–∞—Ç–∞
st.markdown("""
    <h2 style='color:#004488;'>–¢–û–ü –°—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –ó–∞–ª–æ–∑–∏ - –°–∞–º–æ –ù–∞–π-–î–æ–±—Ä–∏—Ç–µ</h2>
    <p>–ò–∑–±–µ—Ä–∏ –¥–∞—Ç–∞ –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ –∏ –≤–∏–∂ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏—Ç–µ –∑–∞–ª–æ–∑–∏ —Å–∞–º–æ –∑–∞ –Ω–µ–ø–æ—á–Ω–∞–ª–∏ —Å—ä–±–∏—Ç–∏—è.</p>
""", unsafe_allow_html=True)

selected_date = st.date_input("–ò–∑–±–µ—Ä–∏ –¥–∞—Ç–∞", value=datetime.date.today())

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ odds
@st.cache_data(show_spinner=False)
def fetch_odds(sport_key):
    url = f"{BASE_URL}{sport_key}/odds"
    params = {
        "apiKey": THE_ODDS_API_KEY,
        "regions": "eu",
        "markets": ",".join(MARKETS),
        "bookmakers": ",".join(BOOKMAKERS),
        "dateFormat": "iso"
    }
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json()

# –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
def calculate_value(odds, implied_prob):
    if odds <= 1:
        return -1
    fair_odds = 1 / implied_prob
    value = (odds - fair_odds) / fair_odds
    return round(value * 100, 2)

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ
sports = ["soccer_epl", "soccer_spain_la_liga", "soccer_italy_serie_a", "soccer_denmark_superliga"]
value_bets = []

now = datetime.datetime.now(datetime.timezone.utc)

for sport in sports:
    try:
        data = fetch_odds(sport)
        for match in data:
            match_time = datetime.datetime.fromisoformat(match['commence_time'].replace("Z", "+00:00"))
            if match_time.date() != selected_date:
                continue
            for bookmaker in match['bookmakers']:
                for market in bookmaker['markets']:
                    if market['key'] not in MARKETS:
                        continue
                    for outcome in market['outcomes']:
                        if 'price' not in outcome or outcome['price'] <= 1:
                            continue
                        if market['key'] == 'totals':
                            total = outcome.get('point')
                            selection = f"{outcome['name']} {total} –≥–æ–ª(–∞)" if total else outcome['name']
                            implied_prob = 0.5
                        else:
                            selection = outcome['name']
                            implied_prob = 0.33

                        value = calculate_value(outcome['price'], implied_prob)
                        if value >= MIN_VALUE_THRESHOLD * 100:
                            value_bets.append({
                                "match": f"{match['home_team']} vs {match['away_team']}",
                                "time": match_time,
                                "league": sport,
                                "market": market['key'],
                                "selection": selection,
                                "odds": outcome['price'],
                                "value": value
                            })
    except Exception as e:
        st.warning(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ {sport}: {e}")

# –§–∏–ª—Ç—Ä–∏—Ä–∞–π –ø–æ –Ω–µ–ø–æ—á–Ω–∞–ª–∏
filtered_bets = [b for b in value_bets if b['time'] > now]

# –°–æ—Ä—Ç–∏—Ä–∞–π –ø–æ —Å—Ç–æ–π–Ω–æ—Å—Ç
filtered_bets.sort(key=lambda x: x['value'], reverse=True)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 3 –∑–∞–ª–æ–≥–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞
bets_today = [b for b in st.session_state.bets if b.get('date') == selected_date.isoformat()]
if len(bets_today) >= MAX_BETS_PER_DAY:
    st.warning(f"–î–æ—Å—Ç–∏–≥–Ω–∞—Ç –µ –º–∞–∫—Å–∏–º—É–º—ä—Ç –æ—Ç {MAX_BETS_PER_DAY} –∑–∞–ª–æ–≥–∞ –∑–∞ –¥–µ–Ω—è.")
    show_bets = []
else:
    # –ü–æ–∫–∞–∂–∏ —Å–∞–º–æ —Ç–æ–ª–∫–æ–≤–∞ –∑–∞–ª–æ–∑–∏, —á–µ –¥–∞ –Ω–µ —Å–µ –Ω–∞–¥–≤–∏—à–∏ –ª–∏–º–∏—Ç–∞
    remaining = MAX_BETS_PER_DAY - len(bets_today)
    show_bets = filtered_bets[:remaining]

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏—Ç–µ –∑–∞–ª–æ–∑–∏ —Å –±—É—Ç–æ–Ω –∑–∞ –∑–∞–ª–∞–≥–∞–Ω–µ
st.markdown(f"<h4 style='color:#008000;'>–¢–û–ü –°—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –ó–∞–ª–æ–∑–∏ –∑–∞ {selected_date.strftime('%d.%m.%Y')} (–ù–µ–ø–æ—á–Ω–∞–ª–∏) - –ú–∞–∫—Å {MAX_BETS_PER_DAY} –∑–∞–ª–æ–≥–∞</h4>", unsafe_allow_html=True)

if not show_bets:
    st.info("–ù—è–º–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏ –∏–ª–∏ –≤–µ—á–µ —Å—Ç–µ –¥–æ—Å—Ç–∏–≥–Ω–∞–ª–∏ –¥–Ω–µ–≤–Ω–∏—è –ª–∏–º–∏—Ç.")

for i, bet in enumerate(show_bets):
    col1, col2 = st.columns([4, 1])
    with col1:
        st.markdown(f"""
            <div style='border:1px solid #ccc; padding:10px; border-radius:10px; margin-bottom:10px;'>
                <b style='color:#444;'>{bet['time'].strftime('%Y-%m-%d %H:%M')} | {bet['league']}</b><br>
                <b style='color:#000;'>{bet['match']}</b><br>
                <i>–ü–∞–∑–∞—Ä:</i> {bet['market']} | <i>–ó–∞–ª–æ–≥:</i> {bet['selection']}<br>
                <i>–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç:</i> <b>{bet['odds']}</b> | <i>–°—Ç–æ–π–Ω–æ—Å—Ç:</i> <span style='color:#007700;'>+{bet['value']}%</span><br>
        """, unsafe_allow_html=True)
    with col2:
        if st.button("–ó–∞–ª–æ–∂–∏", key=f"bet_{i}"):
            if st.session_state.bankroll < BET_AMOUNT:
                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∞ –±–∞–Ω–∫–∞ –∑–∞ —Ç–æ–∑–∏ –∑–∞–ª–æ–≥!")
            else:
                result = {
                    "match": bet['match'],
                    "stake": BET_AMOUNT,
                    "odds": bet['odds'],
                    "potential_win": round(BET_AMOUNT * bet['odds'], 2),
                    "result": "pending",
                    "date": selected_date.isoformat(),
                    "selection": bet['selection'],
                    "market": bet['market']
                }
                st.session_state.bets.append(result)
                st.session_state.bankroll -= BET_AMOUNT
                st.session_state.total_staked += BET_AMOUNT
        st.markdown("</div>", unsafe_allow_html=True)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–ª–æ–∑–∏—Ç–µ - –º–∞—Ä–∫–∏—Ä–∞–Ω–µ –∫–∞—Ç–æ —Å–ø–µ—á–µ–ª–µ–Ω/–∑–∞–≥—É–±–µ–Ω
st.markdown("<h4 style='color:#444;'>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –ó–∞–ª–æ–∑–∏—Ç–µ</h4>", unsafe_allow_html=True)
if st.session_state.bets:
    for i, bet in enumerate(st.session_state.bets):
        col1, col2, col3 = st.columns([5, 1, 1])
        with col1:
            status = bet['result']
            st.markdown(f"""
                <div style='background:#f9f9f9;padding:10px;border-radius:10px;margin-bottom:5px;'>
                    <b>{bet['match']}</b> | –ó–∞–ª–æ–≥: {bet['stake']} –ª–≤. | –ö–æ–µ—Ñ: {bet['odds']} | –°—Ç–∞—Ç—É—Å: <i>{status}</i> | –ü–æ—Ç–µ–Ω—Ü. –ø–µ—á–∞–ª–±–∞: {bet['potential_win']} –ª–≤.
                </div>
            """, unsafe_allow_html=True)
        with col2:
            if status == "pending":
                if st.button("‚úîÔ∏è –ü–æ–±–µ–¥–∞", key=f"win_{i}"):
                    st.session_state.bets[i]['result'] = "win"
                    st.session_state.bankroll += bet['stake'] * bet['odds']
                    st.session_state.total_returned += bet['stake'] * bet['odds']
        with col3:
            if status == "pending":
                if st.button("‚ùå –ó–∞–≥—É–±–∞", key=f"loss_{i}"):
                    st.session_state.bets[i]['result'] = "loss"
                    # –ó–∞–≥—É–±–∞—Ç–∞ –≤–µ—á–µ –µ –∏–∑–≤–∞–¥–µ–Ω–∞ –æ—Ç –±–∞–Ω–∫–∞—Ç–∞ –ø—Ä–∏ –∑–∞–ª–æ–≥–∞

else:
    st.info("–í—Å–µ –æ—â–µ –Ω—è–º–∞ –Ω–∞–ø—Ä–∞–≤–µ–Ω–∏ –∑–∞–ª–æ–∑–∏.")

# –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ ROI
if st.session_state.total_staked > 0:
    roi = (st.session_state.total_returned - st.session_state.total_staked) / st.session_state.total_staked * 100
else:
    roi = 0

st.markdown(f"<b>–û—Å—Ç–∞–≤–∞—â–∞ –±–∞–Ω–∫–∞:</b> {st.session_state.bankroll:.2f} –ª–≤.", unsafe_allow_html=True)
st.markdown(f"<b>–û–±—â–æ –∑–∞–ª–æ–∂–µ–Ω–∏:</b> {st.session_state.total_staked} –ª–≤.", unsafe_allow_html=True)
st.markdown(f"<b>–û–±—â–æ –≤—ä—Ä–Ω–∞—Ç–∏:</b> {st.session_state.total_returned:.2f} –ª–≤.", unsafe_allow_html=True)
st.markdown(f"<b>ROI:</b> {roi:.2f} %", unsafe_allow_html=True)
