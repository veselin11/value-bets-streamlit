import streamlit as st
import pandas as pd
import joblib
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∞
def train_model():
    df = pd.read_csv("football_data.csv")

    enc_team1 = LabelEncoder()
    enc_team2 = LabelEncoder()
    enc_league = LabelEncoder()

    df["–û—Ç–±–æ—Ä 1"] = enc_team1.fit_transform(df["–û—Ç–±–æ—Ä 1"])
    df["–û—Ç–±–æ—Ä 2"] = enc_team2.fit_transform(df["–û—Ç–±–æ—Ä 2"])
    df["–õ–∏–≥–∞"] = enc_league.fit_transform(df["–õ–∏–≥–∞"])

    X = df[["–û—Ç–±–æ—Ä 1", "–û—Ç–±–æ—Ä 2", "–õ–∏–≥–∞", "–ö–æ–µ—Ñ"]]
    y = df["ValueBet"]

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X, y)

    joblib.dump(model, "value_bet_model.pkl")
    joblib.dump({"team1": enc_team1, "team2": enc_team2, "league": enc_league}, "label_encoders.pkl")

    st.success("‚úÖ –ú–æ–¥–µ–ª—ä—Ç –µ –æ–±—É—á–µ–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ!")

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞ –∏ –µ–Ω–∫–æ–¥–µ—Ä–∏—Ç–µ
def load_model():
    model = joblib.load("value_bet_model.pkl")
    encoders = joblib.load("label_encoders.pkl")
    return model, encoders

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–≤–∞–Ω–µ
def predict(df_matches):
    model, encoders = load_model()

    df = df_matches.copy()
    df["–û—Ç–±–æ—Ä 1"] = encoders["team1"].transform(df["–û—Ç–±–æ—Ä 1"])
    df["–û—Ç–±–æ—Ä 2"] = encoders["team2"].transform(df["–û—Ç–±–æ—Ä 2"])
    df["–õ–∏–≥–∞"] = encoders["league"].transform(df["–õ–∏–≥–∞"])

    X = df[["–û—Ç–±–æ—Ä 1", "–û—Ç–±–æ—Ä 2", "–õ–∏–≥–∞", "–ö–æ–µ—Ñ"]]
    df["–ü—Ä–æ–≥–Ω–æ–∑–∞ ValueBet"] = model.predict(X)
    df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç ValueBet"] = model.predict_proba(X)[:,1]

    return df

def main():
    st.title("üéØ Value Bets –ü—Ä–æ–≥–Ω–æ–∑–∏")

    # –ë—É—Ç–æ–Ω –∑–∞ –æ–±—É—á–µ–Ω–∏–µ
    if st.button("–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª–∞"):
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ... –ú–æ–ª—è –∏–∑—á–∞–∫–∞–π—Ç–µ"):
            train_model()

    # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ (–ø—Ä–∏–º–µ—Ä)
    # –¢—É–∫ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–ª–æ–∂–∏—à —Ç–≤–æ—è –Ω–∞—á–∏–Ω –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ matches_df, –ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç API –∏–ª–∏ CSV
    try:
        matches_df = pd.read_csv("matches_to_predict.csv")  # –ø—Ä–∏–º–µ—Ä–Ω–æ
        st.write("–ù–∞–º–µ—Ä–µ–Ω–∏ –º–∞—á–æ–≤–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞–Ω–µ:")
        st.dataframe(matches_df.head())

        if st.button("–ü—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏"):
            results_df = predict(matches_df)
            st.write("–ü—Ä–æ–≥–Ω–æ–∑–∏:")
            st.dataframe(results_df)
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ –∏–ª–∏ –ø—Ä–∞–≤–µ–Ω–µ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

if __name__ == "__main__":
    main()
