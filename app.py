import streamlit as st
import pandas as pd
import requests
import joblib
import datetime
from sklearn.preprocessing import LabelEncoder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
st.set_page_config(page_title="üéØ Value Bets Finder", layout="wide")
st.title("üéØ Value Bets Finder")

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∞
@st.cache_resource
def load_model():
    model = joblib.load("value_bet_model.pkl")
    le = joblib.load("label_encoder.pkl")
    return model, le

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ
def fetch_upcoming_matches(date=None):
    url = "https://api.the-odds-api.com/v4/sports/soccer_epl/odds"
    headers = {
        "Accept": "application/json",
        "User-Agent": "ValueBetsApp/1.0",
    }
    params = {
        "apiKey": "–¢–í–û–Ø_API_–ö–õ–Æ–ß",
        "regions": "eu",
        "markets": "h2h",
        "oddsFormat": "decimal"
    }
    if date:
        params["dateFormat"] = "iso"
        params["date"] = date

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
    except Exception as e:
        st.error(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞: {e}")
        return pd.DataFrame()

    matches = []
    for match in data:
        home = match.get("home_team")
        away = match.get("away_team")
        time = match.get("commence_time")
        for bookmaker in match.get("bookmakers", []):
            if bookmaker["key"] == "bet365":
                for market in bookmaker["markets"]:
                    if market["key"] == "h2h":
                        outcomes = {o["name"]: o["price"] for o in market["outcomes"]}
                        matches.append({
                            "home_team": home,
                            "away_team": away,
                            "commence_time": time,
                            "home_odds": outcomes.get(home),
                            "draw_odds": outcomes.get("Draw"),
                            "away_odds": outcomes.get(away),
                        })
    return pd.DataFrame(matches)

# –ö–∞–ª–∫—É–ª–∞—Ü–∏—è –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
def calculate_probabilities(row):
    try:
        row['home_prob'] = 1 / row['home_odds'] if row['home_odds'] else 0
        row['draw_prob'] = 1 / row['draw_odds'] if row['draw_odds'] else 0
        row['away_prob'] = 1 / row['away_odds'] if row['away_odds'] else 0
        total = row['home_prob'] + row['draw_prob'] + row['away_prob']
        if total > 0:
            row['home_prob'] /= total
            row['draw_prob'] /= total
            row['away_prob'] /= total
    except Exception:
        pass
    return row

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª
try:
    model, le = load_model()
except Exception as e:
    st.error(f"‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª: {e}")
    st.stop()

# –ò–∑–±–æ—Ä –Ω–∞ –¥–∞—Ç–∞
date_filter = st.sidebar.date_input("–ò–∑–±–µ—Ä–∏ –¥–∞—Ç–∞", datetime.date.today())

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ
st.info("‚è≥ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ...")
matches_df = fetch_upcoming_matches(date_filter.strftime('%Y-%m-%d'))

if matches_df.empty:
    st.warning("‚ùå –ù—è–º–∞ –º–∞—á–æ–≤–µ –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞.")
    st.stop()

# –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
matches_df = matches_df.apply(calculate_probabilities, axis=1)

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞–Ω–µ
features = matches_df[["home_prob", "draw_prob", "away_prob"]]
predictions = model.predict(features)
matches_df["prediction"] = le.inverse_transform(predictions)

# –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Value
matches_df["value_bet"] = False
for i, row in matches_df.iterrows():
    prediction = row["prediction"]
    if prediction == "home" and row["home_odds"]:
        matches_df.at[i, "value_bet"] = row["home_prob"] * row["home_odds"] > 1.05
    elif prediction == "draw" and row["draw_odds"]:
        matches_df.at[i, "value_bet"] = row["draw_prob"] * row["draw_odds"] > 1.05
    elif prediction == "away" and row["away_odds"]:
        matches_df.at[i, "value_bet"] = row["away_prob"] * row["away_odds"] > 1.05

# –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ Value –∑–∞–ª–æ–∑–∏
value_df = matches_df[matches_df["value_bet"] == True]

st.subheader("üìà –û—Ç–∫—Ä–∏—Ç–∏ Value –∑–∞–ª–æ–∑–∏")
if not value_df.empty:
    st.dataframe(value_df[["home_team", "away_team", "commence_time", "home_odds", "draw_odds", "away_odds", "prediction"]])
else:
    st.info("üîç –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏ –∑–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞.")
