import streamlit as st
import requests
import pandas as pd
import numpy as np
from scipy.stats import poisson
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
import joblib
from functools import lru_cache

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ================== #
FOOTBALL_DATA_API_KEY = st.secrets["FOOTBALL_DATA_API_KEY"]
ODDS_API_KEY = st.secrets["ODDS_API_KEY"]
SPORT = "soccer_epl"

# –†—ä—á–µ–Ω mapping –Ω–∞ –æ—Ç–±–æ—Ä–∏ (–∏–º–µ -> ID)
TEAM_ID_MAPPING = {
    "Manchester City": 65,
    "AFC Bournemouth": 1044,
    "Liverpool": 64,
    "Everton": 62,
    "Arsenal": 57,
    "Tottenham Hotspur": 73,
    # ... –¥–æ–±–∞–≤–µ—Ç–µ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –æ—Ç–±–æ—Ä–∏
}

# ================== API –§–£–ù–ö–¶–ò–ò ================== #
@st.cache_data(ttl=3600)
def get_live_odds():
    """–í–∑–µ–º–∏ —Ä–µ–∞–ª–Ω–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏ –æ—Ç The Odds API"""
    try:
        response = requests.get(
            f"https://api.the-odds-api.com/v4/sports/{SPORT}/odds",
            params={
                "apiKey": ODDS_API_KEY,
                "regions": "eu",
                "markets": "h2h",
                "oddsFormat": "decimal"
            }
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏: {str(e)}")
        return []

@st.cache_data(ttl=3600)
def get_team_stats(team_name):
    """–í–∑–µ–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ—Ç–±–æ—Ä –æ—Ç Football-Data.org"""
    team_id = TEAM_ID_MAPPING.get(team_name)
    if not team_id:
        return None
    
    try:
        response = requests.get(
            f"https://api.football-data.org/v4/teams/{team_id}/matches",
            headers={"X-Auth-Token": FOOTBALL_DATA_API_KEY},
            params={"status": "FINISHED", "limit": 5}
        )
        response.raise_for_status()
        return response.json()["matches"]
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {team_name}: {str(e)}")
        return None

# ================== –ê–ù–ê–õ–ò–¢–ò–ß–ù–ò –§–£–ù–ö–¶–ò–ò ================== #
def calculate_poisson_probabilities(home_avg, away_avg):
    """–ò–∑—á–∏—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å Poisson –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è"""
    home_win, draw, away_win = 0, 0, 0
    for i in range(0, 6):
        for j in range(0, 6):
            p = poisson.pmf(i, home_avg) * poisson.pmf(j, away_avg)
            if i > j: home_win += p
            elif i == j: draw += p
            else: away_win += p
    return home_win, draw, away_win

def calculate_value_bets(probabilities, odds):
    """–û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏"""
    value = {}
    for outcome in ['home', 'draw', 'away']:
        implied_prob = 1 / odds[outcome]
        value[outcome] = probabilities[outcome] - implied_prob
    return value

# ================== –ú–ê–®–ò–ù–ù–û –û–ë–£–ß–ï–ù–ò–ï ================== #
def predict_with_ai(home_stats, away_stats):
    """–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å ML –º–æ–¥–µ–ª"""
    try:
        model = joblib.load("model.pkl")
        scaler = joblib.load("scaler.pkl")
        
        # –°—ä–∑–¥–∞–π —Ñ–∏–π—á—ä—Ä–∏
        features = np.array([
            home_stats["avg_goals"],
            away_stats["avg_goals"],
            home_stats["win_rate"],
            away_stats["win_rate"]
        ]).reshape(1, -1)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–π
        scaled_features = scaler.transform(features)
        
        # –ù–∞–ø—Ä–∞–≤–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        prediction = model.predict_proba(scaled_features)
        return prediction[0]
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ AI –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
        return None

# ================== –ü–û–¢–†–ï–ë–ò–¢–ï–õ–°–ö–ò –ò–ù–¢–ï–†–§–ï–ô–° ================== #
def main():
    st.set_page_config(page_title="Advanced Bet Analyzer", layout="wide", page_icon="‚öΩ")
    st.title("üîÆ Advanced Bet Analyzer")
    
    # –ó–∞—Ä–µ–¥–∏ –¥–∞–Ω–Ω–∏
    matches = get_live_odds()
    
    if not matches:
        st.warning("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –º–∞—á–æ–≤–µ –≤ –º–æ–º–µ–Ω—Ç–∞")
        return
    
    # –ò–∑–±–æ—Ä –Ω–∞ –º–∞—á
    selected_match = st.selectbox(
        "–ò–∑–±–µ—Ä–∏ –º–∞—á –∑–∞ –∞–Ω–∞–ª–∏–∑:",
        [f'{m["home_team"]} vs {m["away_team"]}' for m in matches]
    )
    match = next(m for m in matches if f'{m["home_team"]} vs {m["away_team"]}' == selected_match)
    
    # –í–∑–µ–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    home_stats_raw = get_team_stats(match["home_team"])
    away_stats_raw = get_team_stats(match["away_team"])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ
    home_stats = {
        "avg_goals": np.mean([m["score"]["fullTime"]["home"] for m in home_stats_raw]) if home_stats_raw else 1.2,
        "win_rate": np.mean([1 if m["score"]["fullTime"]["home"] > m["score"]["fullTime"]["away"] else 0 for m in home_stats_raw]) if home_stats_raw else 0.5
    }
    
    away_stats = {
        "avg_goals": np.mean([m["score"]["fullTime"]["away"] for m in away_stats_raw]) if away_stats_raw else 0.9,
        "win_rate": np.mean([1 if m["score"]["fullTime"]["away"] > m["score"]["fullTime"]["home"] else 0 for m in away_stats_raw]) if away_stats_raw else 0.3
    }
    
    # –ò–∑—á–∏—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    prob_home, prob_draw, prob_away = calculate_poisson_probabilities(
        home_stats["avg_goals"],
        away_stats["avg_goals"]
    )
    
    # –í–∑–µ–º–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏
    best_odds = {
        "home": max(o["price"] for b in match["bookmakers"] for o in b["markets"][0]["outcomes"] if o["name"] == match["home_team"]),
        "draw": max(o["price"] for b in match["bookmakers"] for o in b["markets"][0]["outcomes"] if o["name"] == "Draw"),
        "away": max(o["price"] for b in match["bookmakers"] for o in b["markets"][0]["outcomes"] if o["name"] == match["away_team"])
    }
    
    # Value Bet –∞–Ω–∞–ª–∏–∑
    value_bets = calculate_value_bets(
        {"home": prob_home, "draw": prob_draw, "away": prob_away},
        best_odds
    )
    
    # ================== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ================== #
    tab1, tab2, tab3 = st.tabs(["–û—Å–Ω–æ–≤–µ–Ω –∞–Ω–∞–ª–∏–∑", "–†–∞–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "AI –ü—Ä–æ–≥–Ω–æ–∑–∏"])
    
    with tab1:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.subheader(f"üè† {match['home_team']}")
            st.metric("–°—Ä–µ–¥–Ω–∏ –≥–æ–ª–æ–≤–µ", f"{home_stats['avg_goals']:.2f}")
            st.metric("–®–∞–Ω—Å –∑–∞ –ø–æ–±–µ–¥–∞", f"{prob_home*100:.1f}%")
            st.metric("Value Score", f"{value_bets['home']*100:.1f}%", delta="–°—Ç–æ–π–Ω–æ—Å—Ç–µ–Ω" if value_bets['home'] > 0 else "–ù–µ—Å—Ç–æ–π–Ω–æ—Å—Ç–µ–Ω")
        
        with col2:
            st.subheader("‚öñ –†–∞–≤–µ–Ω")
            st.metric("–®–∞–Ω—Å", f"{prob_draw*100:.1f}%")
            st.metric("Value Score", f"{value_bets['draw']*100:.1f}%", delta="–°—Ç–æ–π–Ω–æ—Å—Ç–µ–Ω" if value_bets['draw'] > 0 else "–ù–µ—Å—Ç–æ–π–Ω–æ—Å—Ç–µ–Ω")
        
        with col3:
            st.subheader(f"‚úà {match['away_team']}")
            st.metric("–°—Ä–µ–¥–Ω–∏ –≥–æ–ª–æ–≤–µ", f"{away_stats['avg_goals']:.2f}")
            st.metric("–®–∞–Ω—Å –∑–∞ –ø–æ–±–µ–¥–∞", f"{prob_away*100:.1f}%")
            st.metric("Value Score", f"{value_bets['away']*100:.1f}%", delta="–°—Ç–æ–π–Ω–æ—Å—Ç–µ–Ω" if value_bets['away'] > 0 else "–ù–µ—Å—Ç–æ–π–Ω–æ—Å—Ç–µ–Ω")
    
    with tab2:
        st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏ 5 –º–∞—á–∞ {match['home_team']}:**")
            for m in home_stats_raw[-5:]:
                result = f"{m['score']['fullTime']['home']}-{m['score']['fullTime']['away']}"
                st.write(f"- {result} ({m['utcDate'][:10]})")
        
        with col2:
            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏ 5 –º–∞—á–∞ {match['away_team']}:**")
            for m in away_stats_raw[-5:]:
                result = f"{m['score']['fullTime']['away']}-{m['score']['fullTime']['home']}"
                st.write(f"- {result} ({m['utcDate'][:10]})")
    
    with tab3:
        st.subheader("ü§ñ AI –ü—Ä–æ–≥–Ω–æ–∑–∞")
        if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–∞–π –ø—Ä–æ–≥–Ω–æ–∑–∞"):
            ai_prediction = predict_with_ai(home_stats, away_stats)
            if ai_prediction:
                st.write(f"### –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
                st.write(f"- –ü–æ–±–µ–¥–∞ {match['home_team']}: {ai_prediction[0]*100:.1f}%")
                st.write(f"- –†–∞–≤–µ–Ω: {ai_prediction[1]*100:.1f}%")
                st.write(f"- –ü–æ–±–µ–¥–∞ {match['away_team']}: {ai_prediction[2]*100:.1f}%")

if __name__ == "__main__":
    main()
