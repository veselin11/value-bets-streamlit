import streamlit as st
import pandas as pd
from scipy.stats import poisson

# –¢–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏ (–∞–∫–æ API –Ω–µ —Ä–∞–±–æ—Ç–∏)
TEST_MATCHES = [
    {
        "home_team": "Manchester City",
        "away_team": "Bournemouth",
        "bookmakers": [{
            "markets": [{
                "outcomes": [
                    {"name": "Manchester City", "price": 1.3},
                    {"name": "Bournemouth", "price": 10.0}
                ]
            }]
        }]
    }
]

# –†—ä—á–µ–Ω mapping –Ω–∞ –æ—Ç–±–æ—Ä–∏ (–∏–º–µ -> —Å—Ä–µ–¥–Ω–∏ –≥–æ–ª–æ–≤–µ)
TEAM_STATS = {
    "Manchester City": {"avg_goals": 2.5, "form": [3,2,1,2,3]},
    "Bournemouth": {"avg_goals": 1.1, "form": [0,1,1,0,1]},
}

def calculate_poisson_prob(home_avg, away_avg):
    """–ò–∑—á–∏—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —á—Ä–µ–∑ Poisson"""
    home_win, draw, away_win = 0, 0, 0
    for i in range(0, 6):
        for j in range(0, 6):
            prob = poisson.pmf(i, home_avg) * poisson.pmf(j, away_avg)
            if i > j: home_win += prob
            elif i == j: draw += prob
            else: away_win += prob
    return home_win, draw, away_win

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="Value Bet Tester", layout="wide")
st.title("‚ö° –¢–µ—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä [DEMO]")

selected_match = st.selectbox("–ò–∑–±–µ—Ä–∏ —Ç–µ—Å—Ç–æ–≤ –º–∞—á", [
    "Manchester City vs Bournemouth"
])

# –ê–Ω–∞–ª–∏–∑ –Ω–∞ –º–∞—á–∞
home_team, away_team = selected_match.split(" vs ")
home_stats = TEAM_STATS.get(home_team, {"avg_goals": 1.5})
away_stats = TEAM_STATS.get(away_team, {"avg_goals": 1.0})

prob_home, prob_draw, prob_away = calculate_poisson_prob(
    home_stats["avg_goals"], 
    away_stats["avg_goals"]
)

# –ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
col1, col2, col3 = st.columns(3)
with col1:
    st.subheader(f"üè† {home_team}")
    st.metric("–°—Ä–µ–¥–Ω–∏ –≥–æ–ª–æ–≤–µ", home_stats["avg_goals"])
    st.metric("–®–∞–Ω—Å –∑–∞ –ø–æ–±–µ–¥–∞", f"{prob_home*100:.1f}%")

with col2:
    st.subheader("‚öñ –†–∞–≤–µ–Ω")
    st.metric("–®–∞–Ω—Å", f"{prob_draw*100:.1f}%")

with col3:
    st.subheader(f"‚úà {away_team}")
    st.metric("–°—Ä–µ–¥–Ω–∏ –≥–æ–ª–æ–≤–µ", away_stats["avg_goals"])
    st.metric("–®–∞–Ω—Å –∑–∞ –ø–æ–±–µ–¥–∞", f"{prob_away*100:.1f}%")

# Value Bet –∞–Ω–∞–ª–∏–∑
best_odds = 1.3 # –ü—Ä–∏–º–µ—Ä–µ–Ω –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç
implied_prob = (1 / best_odds) * 100
value = "‚úÖ VALUE BET" if (prob_home*100) > implied_prob else "‚ùå –ù—è–º–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç"

st.divider()
st.subheader(f"–ê–Ω–∞–ª–∏–∑: {value}")
st.write(f"**–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞ –ø–æ–±–µ–¥–∞**: {best_odds:.2f}")
st.write(f"–í–∞—à–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç: {prob_home*100:.1f}% vs –ò–º–ø–ª–∏—Ü–∏—Ç–Ω–∞: {implied_prob:.1f}%")

# –ì—Ä–∞—Ñ–∏–∫–∞
chart_data = pd.DataFrame({
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç": [prob_home, prob_draw, prob_away],
    "–¢–∏–ø": ["–î–æ–º–∞–∫–∏–Ω", "–†–∞–≤–µ–Ω", "–ì–æ—Å—Ç"]
})
st.bar_chart(chart_data, x="–¢–∏–ø", y="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç")
