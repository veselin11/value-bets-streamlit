import streamlit as st
import pandas as pd
import requests
import datetime
from predictor import predict
from train_model import train_model

API_URL = "https://api.example.com/matches"  # —Å–º–µ–Ω–∏ —Å —Ç–≤–æ—è API URL
API_KEY = "685e423d2d9e078e7c5f7f9439e77f7c"

BANKROLL = 500  # –Ω–∞—á–∞–ª–Ω–∞ –±–∞–Ω–∫–∞, –º–æ–∂–µ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤–∏ –≤—ä–≤–µ–∂–¥–∞–µ–º–∞

def load_matches_from_api(date):
    headers = {"Authorization": f"Bearer {API_KEY}"}
    params = {"date": date.strftime("%Y-%m-%d")}

    try:
        response = requests.get(API_URL, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        if not data.get("response"):
            st.warning("–ù—è–º–∞ –º–∞—á–æ–≤–µ –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞.")
            return pd.DataFrame()

        matches = []
        for match in data["response"]:
            matches.append({
                "–û—Ç–±–æ—Ä 1": match["team1_name"],
                "–û—Ç–±–æ—Ä 2": match["team2_name"],
                "–õ–∏–≥–∞": match["league_name"],
                "–ö–æ–µ—Ñ": match["odds_home_win"]
            })
        return pd.DataFrame(matches)
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ: {e}")
        return pd.DataFrame()

def calculate_stake(value):
    base_stake = BANKROLL * 0.05  # 5% –æ—Ç –±–∞–Ω–∫–∞—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–æ
    stake = base_stake * value  # –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–Ω–æ –Ω–∞ value
    return min(stake, BANKROLL * 0.1)  # –º–∞–∫—Å–∏–º—É–º 10% –æ—Ç –±–∞–Ω–∫–∞—Ç–∞

def main():
    st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    global API_URL, API_KEY
    API_URL = st.sidebar.text_input("API URL", value=API_URL)
    API_KEY = st.sidebar.text_input("API –∫–ª—é—á", type="password", value=API_KEY)
    
    global BANKROLL
    BANKROLL = st.sidebar.number_input("–ù–∞—á–∞–ª–Ω–∞ –±–∞–Ω–∫–∞ (–ª–≤)", value=500, step=50)
    
    date_to_load = st.sidebar.date_input("–î–∞—Ç–∞ –∑–∞ –º–∞—á–æ–≤–µ", value=datetime.date.today())

    st.title("üéØ Value Bets –ü—Ä–æ–≥–Ω–æ–∑–∏")

    if st.button("–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª"):
        with st.spinner("–û–±—É—á–∞–≤–∞–º –º–æ–¥–µ–ª–∞..."):
            train_model()
        st.success("–û–±—É—á–µ–Ω–∏–µ—Ç–æ –µ —É—Å–ø–µ—à–Ω–æ!")

    matches_df = load_matches_from_api(date_to_load)
    if matches_df.empty:
        st.warning("–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –º–∞—á–æ–≤–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞–Ω–µ.")
        return

    st.write(f"–ù–∞–º–µ—Ä–µ–Ω–∏ –º–∞—á–æ–≤–µ: {len(matches_df)}")
    st.dataframe(matches_df)

    try:
        results_df = predict(matches_df)

        # –î–æ–±–∞–≤—è–º–µ –∫–æ–ª–æ–Ω–∞ —Å—ä—Å —Å—É–º–∞ –∑–∞ –∑–∞–ª–æ–≥, –∞–∫–æ –∏–º–∞ –∫–æ–ª–æ–Ω–∞ 'value' –≤ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        if 'value' in results_df.columns:
            results_df['–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Å—É–º–∞ –∑–∞ –∑–∞–ª–æ–≥ (–ª–≤)'] = results_df['value'].apply(calculate_stake)

        st.write("–ü—Ä–æ–≥–Ω–æ–∑–∏ –∑–∞ Value Bets:")
        st.dataframe(results_df)
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–∞–Ω–µ: {e}")

if __name__ == "__main__":
    main()
