import streamlit as st
import requests
import pandas as pd
from scipy.stats import poisson

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FOOTBALL_DATA_API_KEY = "tvoj_football_data_key"
ODDS_API_KEY = "tvoj_odds_api_key"
LEAGUE = "PL"  # –ü—Ä–∏–º–µ—Ä –∑–∞ –ê–Ω–≥–ª–∏–π—Å–∫–∞ –í–∏—Å—à–∞ –ª–∏–≥–∞ (PL)

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞ –¥–∞–Ω–Ω–∏ ---
def get_football_stats(team_name):
    """–í–∑–µ–º–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –æ—Ç–±–æ—Ä –æ—Ç Football-Data.org"""
    url = f"https://api.football-data.org/v4/teams/{team_name}/matches"
    headers = {"X-Auth-Token": FOOTBALL_DATA_API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None

def get_odds():
    """–í–∑–µ–º–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏ –æ—Ç The Odds API"""
    url = f"https://api.the-odds-api.com/v4/sports/soccer_epl/odds"
    params = {"apiKey": ODDS_API_KEY, "regions": "eu"}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    return None

# --- –ò–∑—á–∏—Å–ª–µ–Ω–∏—è ---
def calculate_poisson_prob(home_avg, away_avg):
    """–ò–∑—á–∏—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ–±–µ–¥–∞/—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ/–∑–∞–≥—É–±–∞ —á—Ä–µ–∑ Poisson"""
    home_win = 0
    draw = 0
    away_win = 0
    
    for i in range(0, 6):
        for j in range(0, 6):
            prob = poisson.pmf(i, home_avg) * poisson.pmf(j, away_avg)
            if i > j:
                home_win += prob
            elif i == j:
                draw += prob
            else:
                away_win += prob
                
    return home_win, draw, away_win

# --- Streamlit UI ---
st.title("üîç Value Bet Finder")
st.markdown("–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π –º–∞—á–æ–≤–µ –∑–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–Ω–∏ –∑–∞–ª–æ–∑–∏ –Ω–∞ –±–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏")

# –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ API –∫–ª—é—á–æ–≤–µ
with st.sidebar:
    st.header("üîë API –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    odds_api_key = st.text_input("The Odds API Key", type="password")
    football_api_key = st.text_input("Football-Data.org Key", type="password")

if odds_api_key and football_api_key:
    # –ó–∞—Ä–µ–¥–∏ –¥–∞–Ω–Ω–∏
    matches = get_odds()
    
    if matches:
        # –ò–∑–±–æ—Ä –Ω–∞ –º–∞—á
        match_names = [f"{m['home_team']} vs {m['away_team']}" for m in matches]
        selected_match = st.selectbox("–ò–∑–±–µ—Ä–∏ –º–∞—á", match_names)
        
        # –ù–∞–º–µ—Ä–∏ –∏–∑–±—Ä–∞–Ω–∏—è –º–∞—á
        match_data = next(m for m in matches if f"{m['home_team']} vs {m['away_team']}" == selected_match)
        home_team = match_data['home_team']
        away_team = match_data['away_team']
        
        # –í–∑–µ–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        home_stats = get_football_stats(home_team)
        away_stats = get_football_stats(away_team)
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∏ –¥–∞–Ω–Ω–∏ (—Ä–µ–∞–ª–Ω–æ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –æ–±—Ä–∞–±–æ—Ç—è—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ)
        home_avg_goals = 1.4
        away_avg_goals = 1.1
        
        # –ò–∑—á–∏—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        prob_home, prob_draw, prob_away = calculate_poisson_prob(home_avg_goals, away_avg_goals)
        
        # –ù–∞–º–µ—Ä–∏ –Ω–∞–π-–¥–æ–±—Ä–∏—Ç–µ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏
        best_home_odds = max([o['price'] for bookmaker in match_data['bookmakers'] 
                            for o in bookmaker['markets'][0]['outcomes'] 
                            if o['name'] == home_team])
        
        # –ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üè† –î–æ–º–∞–∫–∏–Ω", f"{prob_home*100:.1f}%")
            st.metric("–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç", f"{best_home_odds:.2f}")
            
        with col2:
            st.metric("‚öñ –†–∞–≤–µ–Ω", f"{prob_draw*100:.1f}%")
            
        with col3:
            st.metric("‚úà –ì–æ—Å—Ç", f"{prob_away*100:.1f}%")
        
        # Value Bet –ª–æ–≥–∏–∫–∞
        implied_prob_home = 1 / best_home_odds
        value_home = "‚úÖ" if prob_home > implied_prob_home else "‚ùå"
        
        st.subheader("Value Bet –ê–Ω–∞–ª–∏–∑")
        st.write(f"–ü–æ–±–µ–¥–∞ {home_team}: {value_home} (–í–∞—à–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç: {prob_home*100:.1f}% vs –ò–º–ø–ª–∏—Ü–∏—Ç–Ω–∞: {implied_prob_home*100:.1f}%)")
        
        # –ì—Ä–∞—Ñ–∏–∫–∞
        chart_data = pd.DataFrame({
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç": [prob_home, prob_draw, prob_away],
            "–¢–∏–ø": ["–î–æ–º–∞–∫–∏–Ω", "–†–∞–≤–µ–Ω", "–ì–æ—Å—Ç"]
        })
        st.bar_chart(chart_data, x="–¢–∏–ø", y="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç")
        
    else:
        st.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ. –ü—Ä–æ–≤–µ—Ä–∏ API –∫–ª—é—á–æ–≤–µ—Ç–µ.")
else:
    st.warning("–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ API –∫–ª—é—á–æ–≤–µ—Ç–µ –≤ –ª—è–≤–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞.")
